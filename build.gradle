/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    // add these plugins from another project
    id 'java'
    id 'com.adarshr.test-logger' version '3.1.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'io.freefair.lombok' version '6.4.1'
//    id 'net.ltgt.errorprone' version '2.0.2'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    //add these dependencies from another project
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation(
            'org.junit.jupiter:junit-jupiter-params:5.8.2',
            'org.slf4j:slf4j-log4j12:2.0.0-alpha6',
            'org.assertj:assertj-core:3.23.1'
    )
//    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
    testImplementation 'org.jacoco:org.jacoco.agent:0.8.8'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // configuring Gradle to use "picocli" as an external dependency in your project
    implementation 'info.picocli:picocli:4.6.3'
//    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'

    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.11.2'
}

application {
    // Define the main class for the application.
    mainClass = 'hexlet.code.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
compileJava {
    options.release = 17
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "db5cdb8223e5c365b028"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}
jacocoTestReport {
//    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
//        csv.required = true
//        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
//jacoco {
//    toolVersion = "0.8.7"
//    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
//}
